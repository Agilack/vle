INCLUDE_DIRECTORIES(
  ${VLE_BINARY_DIR}
  ${VLE_SOURCE_DIR}/src
  ${Boost_INCLUDE_DIRS}
  ${GLIBMM_INCLUDE_DIRS}
  ${LIBXMLPP_INCLUDE_DIRS})

LINK_DIRECTORIES(
  ${GLIBMM_LIBRARY_DIRS}
  ${LIBXMLPP_LIBRARY_DIR})

IF(WIN32 AND NOT UNIX)
  SET(OS_SPECIFIC_PATH_IMPL PathWin32.cpp)
ELSE(WIN32 AND NOT UNIX)
  SET(OS_SPECIFIC_PATH_IMPL PathUnix.cpp)
ENDIF(WIN32 AND NOT UNIX)

SET(UTILS_CPP Host.cpp Path.cpp PathOptionGroup.cpp Rand.cpp Simpson.cpp
  Socket.cpp SocketImpl.c Tools.cpp Trace.cpp XML.cpp ${OS_SPECIFIC_PATH_IMPL})

SET(UTILS_HPP Algo.hpp Debug.hpp Exception.hpp Host.hpp Path.hpp
  PathOptionGroup.hpp Pool.hpp Rand.hpp Simpson.hpp SocketImpl.h Socket.hpp
  Tools.hpp Trace.hpp XML.hpp)

ADD_LIBRARY(vleutils SHARED ${UTILS_CPP};${UTILS_HPP})

SET_TARGET_PROPERTIES(vleutils PROPERTIES ${VLE_LIBRARY_PROPERTIES})

TARGET_LINK_LIBRARIES(vleutils
  ${GLIBMM_LIBRARIES}
  ${LIBXMLPP_LIBRARIES}
  ${GTHREAD_LIBRARIES}
  ${OS_SPECIFIC_LIBRARIES})

INSTALL(TARGETS vleutils
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib)

INSTALL(FILES ${UTILS_HPP} DESTINATION ${VLE_INCLUDE_DIRS}/utils)

IF (HAVE_UNITTESTFRAMEWORK)
  ADD_SUBDIRECTORY(test)
ENDIF (HAVE_UNITTESTFRAMEWORK)
