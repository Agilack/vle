PROJECT(VLE CXX C)

##
## Modules
##

INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckLibraryExists)
INCLUDE(CMakeDetermineCCompiler)
INCLUDE(CPack)
ENABLE_TESTING()

##
## Set global variables.
##

SET(VLE_PACKAGE_VERSION_MAJOR 0)
SET(VLE_PACKAGE_VERSION_MINOR 5)
SET(VLE_PACKAGE_VERSION_PATCH 0)
SET(VLE_RESOURCE_FILE_LICENCE "${CMAKE_SOURCE_DIR}/COPYING")
SET(VLE_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README")
SET(VLE_PACKAGE_VENDOR "quesnel@users.sourceforge.net")
SET(VLE_PACKAGE_VERSION "${VLE_PACKAGE_VERSION_MAJOR}.${VLE_PACKAGE_VERSION_MINOR}.${VLE_PACKAGE_VERSION_PATCH}")
SET(VLE_PACKAGE_NAME "vle")

SET(VLE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
SET(VLE_LIBRARY_DIRS "${CMAKE_INSTALL_PREFIX}/lib/${VLE_PACKAGE_NAME}-${VLE_PACKAGE_VERSION}")
SET(VLE_LIBRARY_DIR "${CMAKE_INSTALL_PREFIX}/lib")
SET(VLE_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/${VLE_PACKAGE_NAME}-${VLE_PACKAGE_VERSION}/vle")
SET(VLE_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/${VLE_PACKAGE_NAME}-${VLE_PACKAGE_VERSION}")
SET(VLE_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin")
SET(VLE_MANPAGE_PATH "${CMAKE_INSTALL_PREFIX}/share/man/man1")
SET(VLE_SHARE_DIRS
    "${CMAKE_MODULE_PATH}/share/${VLE_PACKAGE_NAME}-${VLE_PACKAGE_VERSION}")

##
## Debug mode
##

OPTION(BUILD_DEBUG "Build the project in Debug mode [default=on]" ON)
IF (BUILD_DEBUG)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -W -Werror")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -W -Werror")
ENDIF (BUILD_DEBUG)

##
## Check libraries with pkgconfig
##

SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
FIND_PACKAGE(PkgConfig)

PKG_CHECK_MODULES(GLIBMM glibmm-2.4)
PKG_CHECK_MODULES(GTHREAD gthread-2.0)
PKG_CHECK_MODULES(LIBXMLPP libxml++-2.6)

##
## Manage the Win32 port.
##

IF(WIN32)
	SET(OS_SPECIFIC_LIBRARIES wsock32 netapi32)
ELSE(WIN32)
	SET(OS_SPECIFIC_LIBRARIES)
ENDIF(WIN32)

##
## Test the libsqlxx dependencies
##

OPTION(WITH_SQLXX "with libsqlxx for the odbc driver [default: on]" ON)
IF (WITH_SQLXX)
	CHECK_INCLUDE_FILE_CXX(sqlxx.h HAVE_SQLXX)
	IF (HAVE_SQLXX)
		SET(LIBSQLXX_LIBRARIES "sqlxx")
	ELSE (HAVE_SQLXX)
		SET(LIBSQLXX_LIBRARIES)
	ENDIF (HAVE_SQLXX)
ENDIF (WITH_SQLXX)

ADD_SUBDIRECTORY(src)

##
## Test Boost
##

FIND_PACKAGE(Boost)

##
## Generate the config.h
##

CHECK_INCLUDE_FILE_CXX(cxxabi.h HAVE_GCC_ABI_DEMANGLE)
CHECK_INCLUDE_FILE_CXX(execinfo.h HAVE_EXECINFO_H)
CHECK_INCLUDE_FILE_CXX(signal.h HAVE_SIGNAL_H)

INCLUDE_DIRECTORIES(${VLE_BINARY_DIR})

CONFIGURE_FILE(${VLE_SOURCE_DIR}/config.h.cmake ${VLE_BINARY_DIR}/config.h)
MESSAGE(${CMAKE_CURRENT_BINARY_DIR})
##
## Status
##

MESSAGE(STATUS "- - - -")
MESSAGE(STATUS "${VLE_PACKAGE_NAME} ${VLE_PACKAGE_VERSION} configured successfully")
MESSAGE(STATUS "Using ${VLE_INSTALL_PREFIX} for installation")
MESSAGE(STATUS "Using Building with ${CMAKE_C_FLAGS} for C flags")
MESSAGE(STATUS "Using Building with ${CMAKE_CXX_FLAGS} for C++ flags")
IF (HAVE_GCC_ABI_DEMANGLE)
	MESSAGE(STATUS "Build with GCC ABI Demangle...: yes")
ENDIF (HAVE_GCC_ABI_DEMANGLE)
IF (HAVE_SQLXX)
	MESSAGE(STATUS "Build with SQL................: yes")
ENDIF (HAVE_SQLXX)
IF (HAVE_EXECINFO_H)
	MESSAGE(STATUS "Build with execinfo.h.........: yes")
ENDIF (HAVE_EXECINFO_H)
IF (Boost_FOUND)
	MESSAGE(STATUS "Build with boost..............: yes")
ENDIF (Boost_FOUND)
MESSAGE(STATUS "- - - -")
